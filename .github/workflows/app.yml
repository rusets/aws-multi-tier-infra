name: app

on:
  push:
    branches: [ "main" ]
    paths:
      - "app/**"
      - "public/**"
      - ".github/workflows/app.yml"
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  PARAM_PATH: /multi-tier-demo

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::097635932419:role/multi-tier-demo-github-app
          aws-region: ${{ env.AWS_REGION }}

      - name: Get assets bucket from SSM
        id: ssm
        run: |
          set -euo pipefail
          BUCKET=$(aws ssm get-parameter \
            --name "${PARAM_PATH}/assets_bucket" \
            --query 'Parameter.Value' --output text)
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "Assets bucket: $BUCKET"

      - name: Setup Node 18 (if Node app exists)
        if: hashFiles('app/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Build Node app
        id: build_node
        if: hashFiles('app/package.json') != ''   # Only when app/package.json exists
        run: |
          set -euo pipefail
          cd app
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "Lockfile found -> npm ci"
            npm ci --omit=dev
          else
            echo "No lockfile -> npm install"
            npm install --omit=dev
          fi
          npm run build || true
          cd ..
          TS=$(date +'%Y%m%d-%H%M%S')
          ZIP="app-$TS-${GITHUB_SHA::7}.zip"
          # Исключим node_modules: на инстансе всё равно идёт npm install
          zip -r "$ZIP" app -x "app/node_modules/**" "app/.cache/**"
          echo "artifact=$ZIP" >> $GITHUB_OUTPUT

      - name: Package static files (public/) if no Node app
        id: pack_static
        if: hashFiles('app/package.json') == '' && hashFiles('public/**') != ''
        run: |
          set -euo pipefail
          TS=$(date +'%Y%m%d-%H%M%S')
          ZIP="app-$TS-${GITHUB_SHA::7}.zip"
          zip -r "$ZIP" public
          echo "artifact=$ZIP" >> "$GITHUB_OUTPUT"

      - name: Pick artifact
        id: pick
        run: |
          set -euo pipefail
          if [ -n "${{ steps.build_node.outputs.artifact }}" ]; then
            echo "key=${{ steps.build_node.outputs.artifact }}" >> "$GITHUB_OUTPUT"
          else
            echo "key=${{ steps.pack_static.outputs.artifact }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload to S3
        run: |
          set -euo pipefail
          aws s3 cp "${{ steps.pick.outputs.key }}" "s3://${{ steps.ssm.outputs.bucket }}/artifacts/${{ steps.pick.outputs.key }}"

      - name: Update SSM artifact key (current)
        run: |
          set -euo pipefail
          aws ssm put-parameter \
            --name "${PARAM_PATH}/app/artifact_key" \
            --type String \
            --overwrite \
            --value "artifacts/${{ steps.pick.outputs.key }}"
          echo "Updated ${PARAM_PATH}/app/artifact_key -> artifacts/${{ steps.pick.outputs.key }}"

      - name: Record deployment metadata (optional)
        run: |
          set -euo pipefail
          aws ssm put-parameter \
            --name "${PARAM_PATH}/app/last_deploy_sha" \
            --type String --overwrite \
            --value "${GITHUB_SHA}"
          aws ssm put-parameter \
            --name "${PARAM_PATH}/app/last_deploy_time" \
            --type String --overwrite \
            --value "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      # Optional: start a rolling refresh so new AMIs pick the artifact immediately
      # Make sure the OIDC role has autoscaling:StartInstanceRefresh on your ASG ARN.
      # - name: Start ASG Instance Refresh (optional)
      #   env:
      #     ASG_NAME: multi-tier-demo-asg
      #   run: |
      #     set -euo pipefail
      #     aws autoscaling start-instance-refresh \
      #       --auto-scaling-group-name "$ASG_NAME" \
      #       --preferences 'MinHealthyPercentage=90,InstanceWarmup=30' \
      #       --strategy Rolling