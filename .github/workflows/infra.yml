name: infra

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action"
        required: true
        type: choice
        default: apply
        options:
          - apply
          - destroy
      auto_approve:
        description: "Apply/destroy without manual approval (CI-friendly)"
        required: true
        type: boolean
        default: true
  push:
    branches:
      - main
    paths:
      - "**/*.tf"
      - ".github/workflows/infra.yml"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  TF_IN_AUTOMATION: "1"

concurrency:
  group: infra-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install Terraform BEFORE any terraform commands
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          # terraform_version: 1.8.5  # optionally pin version

      - name: Terraform version
        run: terraform version

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::097635932419:role/multi-tier-demo-github-tf
          role-session-name: gha-terraform
          role-duration-seconds: 3600
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform fmt (check)
        run: terraform fmt -check -recursive

      - name: Terraform init
        run: terraform init -input=false

      # Optional: import existing role so Terraform doesn't try to recreate it
      - name: Import github_tf role if needed
        run: |
          set -e
          terraform state show aws_iam_role.github_tf >/dev/null 2>&1 || \
          terraform import aws_iam_role.github_tf multi-tier-demo-github-tf

      - name: Terraform validate
        run: terraform validate

      # ----- APPLY -----
      - name: Terraform plan (apply)
        if: ${{ inputs.action == 'apply' }}
        run: terraform plan -input=false -out=tfplan

      - name: Terraform apply saved plan
        if: ${{ inputs.action == 'apply' && inputs.auto_approve }}
        run: terraform apply -input=false -auto-approve tfplan

              # ----- DESTROY -----
      # Remove CI roles from state to avoid prevent_destroy errors
      - name: Pre-destroy: drop CI roles from state
        if: ${{ inputs.action == 'destroy' }}
        run: |
          set -e
          terraform state rm \
            aws_iam_role.github_tf \
            aws_iam_role.github_app \
            aws_iam_role_policy_attachment.tf_poweruser \
            aws_iam_role_policy_attachment.tf_iam_extras_attach \
            aws_iam_role_policy.github_app_artifacts_and_ssm \
            aws_iam_role_policy.github_app_asg_refresh || true

      # Empty the artifacts bucket before destroy (Terraform will fail if not empty)
      - name: Pre-destroy: empty artifacts bucket
        if: ${{ inputs.action == 'destroy' }}
        run: |
          set -e
          BKT=$(terraform state show aws_s3_bucket.assets | awk -F' = ' '/^ *bucket *=/ {print $2}' | tr -d '"')
          if [ -n "$BKT" ]; then
            aws s3 rm "s3://$BKT" --recursive || true
          fi

      # Scale down ASG to 0 to speed up destroy
      - name: Pre-destroy: scale ASG to zero
        if: ${{ inputs.action == 'destroy' }}
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name multi-tier-demo-asg \
            --min-size 0 --max-size 0 --desired-capacity 0 || true

      # Terraform destroy plan
      - name: Terraform plan (destroy)
        if: ${{ inputs.action == 'destroy' }}
        run: terraform plan -destroy -input=false -out=tfplan

      # Terraform destroy apply
      - name: Terraform destroy saved plan
        if: ${{ inputs.action == 'destroy' && inputs.auto_approve }}
        run: terraform apply -input=false -auto-approve tfplan

      # ----- DESTROY -----
      - name: Terraform plan (destroy)
        if: ${{ inputs.action == 'destroy' }}
        run: terraform plan -destroy -input=false -out=tfplan

      - name: Terraform destroy saved plan
        if: ${{ inputs.action == 'destroy' && inputs.auto_approve }}
        run: terraform apply -input=false -auto-approve tfplan